/**\n * Individual Tools API Endpoints\n * Each tool can be called independently for lead generation\n */\n\nimport express from 'express';\nimport { rateLimit } from 'express-rate-limit';\nimport { AIService } from '../services/ai/AIService';\nimport { CrawlerService } from '../services/crawler/CrawlerService';\nimport { BacklinkService } from '../services/backlinks/BacklinkService';\nimport { KeywordService } from '../services/keywords/KeywordService';\nimport { LeadCaptureService } from '../services/lead-capture';\n\nconst router = express.Router();\n\n// Rate limiting for free tool usage\nconst toolRateLimit = rateLimit({\n  windowMs: 24 * 60 * 60 * 1000, // 24 hours\n  max: (req, res) => {\n    const tool = req.path.split('/')[1];\n    return getToolDailyLimit(tool);\n  },\n  message: 'Daily limit reached. Upgrade for unlimited access.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n/**\n * 1. AI Website Crawler Tool\n * Target: \"website crawler\", \"seo crawler\", \"site crawler\"\n */\nrouter.post('/website-crawler', toolRateLimit, async (req, res) => {\n  try {\n    const { url, email } = req.body;\n    \n    if (!url || !isValidUrl(url)) {\n      return res.status(400).json({ error: 'Valid URL required' });\n    }\n\n    // Run website crawl\n    const crawlResults = await CrawlerService.crawlWebsite(url);\n\n    // Capture lead if email provided\n    if (email && isValidEmail(email)) {\n      await LeadCaptureService.captureLead(email, 'website-crawler', url);\n    }\n\n    res.json({\n      success: true,\n      results: {\n        pages_analyzed: crawlResults.pages,\n        issues_found: crawlResults.issues.length,\n        performance_score: crawlResults.performance.score,\n        load_time: crawlResults.performance.loadTime,\n        issues: crawlResults.issues.slice(0, 5), // Show first 5 issues\n        limitations: {\n          pages_scanned: `${crawlResults.pages}/100 (free limit)`,\n          full_analysis: 'Upgrade for complete site analysis'\n        }\n      },\n      upgrade_message: LeadCaptureService.generateUpgradeMessage('website-crawler'),\n      upgrade_benefits: [\n        'Scan unlimited pages',\n        'Advanced AI recommendations',\n        'Competitor analysis',\n        'Historical tracking',\n        'White-label reports'\n      ]\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    res.status(500).json({ error: 'Analysis failed', message: errorMessage });\n  }\n});\n\n/**\n * 2. AI Backlink Checker Tool\n * Target: \"backlink checker\", \"check backlinks\", \"free backlink tool\"\n */\nrouter.post('/backlink-checker', toolRateLimit, async (req, res) => {\n  try {\n    const { domain, email } = req.body;\n    \n    if (!domain || !isValidDomain(domain)) {\n      return res.status(400).json({ error: 'Valid domain required' });\n    }\n\n    // Get backlink data\n    const backlinkData = await BacklinkService.checkBacklinks(domain);\n\n    // Capture lead\n    if (email && isValidEmail(email)) {\n      await LeadCaptureService.captureLead(email, 'backlink-checker', domain);\n    }\n\n    res.json({\n      success: true,\n      results: {\n        total_backlinks: backlinkData.total,\n        referring_domains: backlinkData.domains,\n        domain_authority: backlinkData.metrics.domainAuthority,\n        trust_flow: backlinkData.metrics.trustFlow,\n        citation_flow: backlinkData.metrics.citationFlow,\n        top_backlinks: backlinkData.backlinks,\n        limitations: {\n          backlinks_shown: `${backlinkData.backlinks.length}/100 (free limit)`,\n          competitor_analysis: 'Upgrade for competitor comparison'\n        }\n      },\n      upgrade_message: LeadCaptureService.generateUpgradeMessage('backlink-checker'),\n      upgrade_benefits: [\n        'Complete backlink profile',\n        'Competitor backlink analysis',\n        'Historical link tracking',\n        'Toxic link monitoring',\n        'Link building opportunities'\n      ]\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    res.status(500).json({ error: 'Backlink analysis failed', message: errorMessage });\n  }\n});\n\n/**\n * 3. AI Keyword Research Tool\n * Target: \"keyword research tool\", \"free keyword tool\", \"keyword generator\"\n */\nrouter.post('/keyword-research', toolRateLimit, async (req, res) => {\n  try {\n    const { keyword, email } = req.body;\n    \n    if (!keyword || keyword.trim().length === 0) {\n      return res.status(400).json({ error: 'Keyword required' });\n    }\n\n    // Get keyword research data\n    const keywordData = await KeywordService.researchKeywords(keyword);\n\n    // Capture lead\n    if (email && isValidEmail(email)) {\n      await LeadCaptureService.captureLead(email, 'keyword-research', keyword);\n    }\n\n    res.json({\n      success: true,\n      results: {\n        main_keyword: keyword,\n        keywords: keywordData.keywords.slice(0, 10), // Free limit: 10 keywords\n        related_keywords: keywordData.related,\n        questions: keywordData.questions,\n        limitations: {\n          suggestions_shown: '10/unlimited (free limit)',\n          serp_analysis: 'Upgrade for detailed SERP analysis'\n        }\n      },\n      upgrade_message: LeadCaptureService.generateUpgradeMessage('keyword-research'),\n      upgrade_benefits: [\n        'Unlimited keyword research',\n        'Advanced SERP analysis',\n        'Competitor keyword gaps',\n        'Historical trend data',\n        'Bulk keyword processing'\n      ]\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    res.status(500).json({ error: 'Keyword research failed', message: errorMessage });\n  }\n});\n\n/**\n * 4. AI Meta Tag Generator Tool\n * Target: \"meta tag generator\", \"title tag generator\", \"meta description generator\"\n */\nrouter.post('/meta-tag-generator', toolRateLimit, async (req, res) => {\n  try {\n    const { url, target_keyword, email } = req.body;\n    \n    if (!url || !isValidUrl(url)) {\n      return res.status(400).json({ error: 'Valid URL required' });\n    }\n\n    // Analyze page and generate meta tags\n    const pageAnalysis = await CrawlerService.analyzePage(url);\n    const metaTags = await AIService.generateMetaTags(url);\n\n    // Capture lead\n    if (email && isValidEmail(email)) {\n      await LeadCaptureService.captureLead(email, 'meta-tag-generator', url);\n    }\n\n    res.json({\n      success: true,\n      results: {\n        current_tags: {\n          title: pageAnalysis.title,\n          description: pageAnalysis.metaDescription,\n          title_length: pageAnalysis.title?.length || 0,\n          description_length: pageAnalysis.metaDescription?.length || 0\n        },\n        ai_suggestions: {\n          title: metaTags.title,\n          description: metaTags.description,\n          keywords: metaTags.keywords\n        },\n        page_analysis: {\n          headings: pageAnalysis.headings,\n          images: pageAnalysis.images,\n          internal_links: pageAnalysis.links.internal,\n          external_links: pageAnalysis.links.external\n        },\n        limitations: {\n          suggestions_shown: '1 set/unlimited (free limit)',\n          bulk_generation: 'Upgrade for bulk meta tag generation'\n        }\n      },\n      upgrade_message: LeadCaptureService.generateUpgradeMessage('meta-tag-generator'),\n      upgrade_benefits: [\n        'Unlimited meta tag generation',\n        'Bulk site-wide optimization',\n        'A/B testing variations',\n        'Competitive analysis',\n        'Historical performance tracking'\n      ]\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    res.status(500).json({ error: 'Meta tag generation failed', message: errorMessage });\n  }\n});\n\n/**\n * Helper Functions\n */\ntype ToolName = 'website-crawler' | 'backlink-checker' | 'keyword-research' | 'meta-tag-generator' | 'page-speed-checker' | 'serp-analyzer';\n\nfunction getToolDailyLimit(tool: string): number {\n  const limits: Record<ToolName, number> = {\n    'website-crawler': 3,\n    'backlink-checker': 5,\n    'keyword-research': 10,\n    'meta-tag-generator': 5,\n    'page-speed-checker': 3,\n    'serp-analyzer': 5\n  };\n  return limits[tool as ToolName] || 5;\n}\n\nfunction isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValidDomain(domain: string): boolean {\n  const domainRegex = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?$/i;\n  return domainRegex.test(domain);\n}\n\nfunction isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport default router;\n","numLines":255,"startLine":1,"totalLines":255}}